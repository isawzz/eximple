game hat: name gamename players fen step
user hat: name 
action hat: game user choices choice


ok also dann ein anderes spiel?
welches?
etwas mit c52 cards
bluff?
____rules:
__setup:
1. each person gets 2 cards
2. table: just says whose turn it is (random)
__play:
1. starting from turn player, bid
2. when someone call bluff:
- last player (turn player)'s cards put open on table
=>depending on 

//fuer die dixit cards brauch ich was?
//irgendwo am andern comp hab ich ein beispiel! aber weiss nicht wo!


dixit:
fen: turn:mimi
hidden: hand for each player
choices: hand for each player

wo soll das gemacht werden?
how to start a game?
erstmal lade die dixit cards from base! aber wie?





TODO:
- python send print to output instead of terminal vs code
- wie soll ich es ohne sockets machen?
- jedesmal wenn action mache aber nicht di eletzte bin, soll er nur db updaten
- wenn der letzte bin soll er db updaten und reload ueberall machen
- wenn nicht der letzte bin wird ja gamestate nicht geaendert
- wie mach ich es dass der choice bei den anderen nicht reflected wird wenn sie reloaden?
- das geht nur wenn ich die choices nur fuer den jeweiligen user zeige
- also ist das current interface NUR ZUM TESTEN GEEIGNET
- beim echten interface, zeigen nur die choices fuer den user falls dieser user noch nicht chosen hat
- wenn der letzt bin soll auch gamestate updated werden
- present: gamestate und choices fuer diesen user
- jetzt ueberlege wie man gamestate beschreiben kann bei einem simplen spiel
- welches spiel? dixit
- gamestate die cards die am tisch liegen, die eigenen cards, das wort
- choices: eine von eigenen cards
- was kann ich machen mit dem maedi? just observe?
a) keine fragen stellen?
b) fragen stellen?
c) garnicht reden
d) was erzaehlen
aber worueber?
wichtig ist glaub ich, nichts zu assumen
im moment ist sie uncomfortable aber safe
was schaff ich jetzt noch?
eigentlich garnichts
oder nudeln kochen mit zweibel und kaese

dixit example:
fen = what do I see?
hiddenstate = per player like actions
kann ich nicht die actions erweitern sodass ich irgendeinen hidden state habe: 3 overlapping sets of keys into some kind of dictionary (game dictionary), 
each of these keys corresponds to an item and/or an action that this player sees
anstatt actions call it hidden state
ja doch ich glaub ich schaff es noch so ein essen zu machen

what would kala want me to do in this situation?
unclutching is the obvious answer
but action wise? what is the action that would be helpful?
a) go to the hospital, sit there, be there, quietly
b) read book to a
c) 



Basepath
_______socket io client code js:
a) <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.8/socket.io.min.js" crossorigin="anonymous"></script>
b) <script type="text/javascript" src="{{ url_for('static', filename='lib/sio/socket.io/client-dist/socket.io.js') }}" crossorigin="anonymous"></script>
c) <script src="../lib/sio/socket.io/client-dist/socket.io.js"></script>
fazit: nur a geht! leave it now!

SOCKETSERVER
send('hallo') or emit('message',hallo)
broadcast=True oder nicht
send(o) or emit('message',o)
moeglichkeit context: home (at home local),public (=public local),offline,heroku

_____app.py run:
a) 	socketio.run(app, host='0.0.0.0', debug=True)
b) 	socketio.run(app, debug=True)

__________WORKS!
1) public+internet (eg. Harborview)
in html:
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.8/socket.io.min.js" crossorigin="anonymous"></script>
in app:
	socketio.run(app, debug=True)
in js (client):
			var Socket;
			function start() {
				Socket = io.connect(SOCKETSERVER);
				Socket.on('connect', () => {
					Socket.emit('message', 'user has connected');
				});
				Socket.on('message', (x) => {
					console.log('message from server 1:', x);
					let elem = mBy('messages');
					mAppend(elem, mCreateFrom(`<li>${x}</li>`));
				});
			}
			function socketsend() {
				let elem = mBy('myMessage');
				let text = elem.value;
				//elem.value = '';
				Socket.send(text);
				return false;
			}
in server:
@socketio.on('message') #public event
def handle_message(msg):
	print('::::',msg)
	emit('message','hallo1') #OK


onclick_action()
- find user, game, action
MIT SOCKETS:
- check if this was the last user to perform action
- if yes:
  update game state
	POST action route and new state, and actions and originator
	server updates db Action, Game
	server emits gamename to broadcast
	each player except originator then reloads the page
	(=same as post but get instead)
- if no:
	client broadcast gamename user action choice
	(or: client emit, server broadcast)
  all: individual update of ServerData
  originator or all: individual update of choice in action table
	=>no reload necessary! 
  
OHNE SOCKETS:
- check if this was the last user to perform action
- if yes:
  update game state
	POST action route and new state, and actions and originator
	server updates db Action, Game
	=>other users must reload manually at this point!
- if no:
	client broadcast gamename user action choice
	(or: client emit, server broadcast)
  all: individual update of ServerData
  originator or all: individual update of choice in action table
	=>no reload necessary! 


das wird gepostet: 
	{gamerec: {…}, gameactions: Array(2), user: 'mimi', game: 'paris', action: '5'}
	action: "5"
	game: "paris"
	gameactions: Array(2)
	0: {choice: null, choices: 'c n b k d', created: 'Wed, 23 Feb 2022 02:13:33 GMT', done: false, due: 'Wed, 23 Feb 2022 02:13:33 GMT', …}
	1: {choice: null, choices: '9 3 p 8 d', created: 'Wed, 23 Feb 2022 02:13:33 GMT', done: false, due: 'Wed, 23 Feb 2022 02:13:33 GMT', …}
	length: 2
	[[Prototype]]: Array(0)
	gamerec:
	created: "Wed, 23 Feb 2022 02:13:33 GMT"
	fen: "state for step 1"
	gamename: "aristocracy"
	host_id: 1
	id: 1
	modified: "Wed, 23 Feb 2022 02:13:33 GMT"
	name: "paris"
	players: (2) ['mimi', 'felix']
	status: "start"
	step: 1
	[[Prototype]]: Object
	user: "mimi"

fuer actions muss ich choice und choices updaten








